#ifndef GUEYECAMERA_H
#define GUEYECAMERA_H
#include "plugincameraueye_global.h"

#include "imaging.h"
#include "uEye/uEye.h"

const int G_UEYE_NUM_BUFFER_QUEUE = 4;

/////////////////////////////////////////////////////////////////////
//! \brief The GUeyeCamera class is implementing the GCamera class for a generic uEye camera
/*!
file:///C:/Program%20Files/IDS/uEye/Help/uEye_Manual/index.html
*/
class PLUGINCAMERAUEYE_EXPORT GUeyeCamera : public GCamera
{
	Q_OBJECT

public:
	GUeyeCamera(QString uniqueIdentifierName, QObject *parent);
	~GUeyeCamera();

	//! Re-implemented
	bool OpenCamera();
	//! Re-implemented
	bool CloseCamera();
	//! Re-implemented
	QSize GetMaxImageSize() const;
	//! Re-implemented
	double GetExposureMin();
	//! Re-implemented
	double GetExposureMax();
	//! Re-implemented
	virtual int BitsPerPixel() const {return m_nBitsPerPixel;}
	//! Re-implemented
	double ImagePerSecond();
	//! Re-implemented
	QRect SensorAOI() const;
	//! Re-implemented
	void SingleShotNow();
	//! Re-implemented
	void ContinuousShot(bool StartOrStop = true);
	//! Re-implemented
	bool SupportsExternalTrigger() const;
	//! Re-implemented
	void UseExternalTrigger(bool yesORno);

	//! Re-implemented from GDevice to tell if the camera is opened and capable.
	bool IsAble() const;

protected:
	//! Re-implemented
	double SetExposureTime(double proposedNewExpo);
	//! Re-implemented
	double SetGainFactor(double proposedGainFactor);
	//! Re-implemented
	virtual QRect SetSensorAOI(QRect AoiRect);
	//! Reimplemented
	virtual void PopulateDeviceWidget(GDeviceWidget* theDeviceWidget);
	//! Sets the ID used to initialize the camera using the device ID (this ID is generated by the driver depending on order of connection and camera type. The device ID is not persistent).
	void SetSystemDeviceID( ulong DeviceID );

protected slots:
	//! Sets the pixel clock of the uEye camera. If no argument is passed, the value of m_PixelClock is used.
	int SetPixelClock_MHz(int proposedPixelClock = 0);

private:
	//! Allocates a series of buffers for the capture. For now, returns the sum of the errors from the uEye functions called in it.
	int PrepareBufferQueue();
	//! Clears and an allocate the buffer series.
	void ClearBufferQueue();

private:
	HIDS m_CamHandle;
	int m_nBitsPerPixel;
	int m_nColorMode;
	GParamDouble m_PixelClock;

	QHash<char*, int> m_AllocatedBuffer;

	//! switch to say that only one image is expected to be delivered. Used for the GCamera::SingleShotNow().
	volatile bool m_WaitForOnlyOneImage;
	//! bool to turn the acquisition back on when camera disconnected and reconnected
	bool m_wasShootingAndShouldAutoRestart;
	//! temporary used when the camera is about to be opened using its device ID
	bool m_IsUsingDeviceIdToOpen;
	friend class GUeyeCameraManager;
	friend class GUeyeImageDistributor;
};

#endif // GUEYECAMERA_H
